#usda 1.0

def "mdl"
{
    def "nvidia"
    {
        def "test_types"
        {
            def Material "materialWithEnum"
            {
                int inputs:mode = 0 (
                    renderType = "::base::color_layer_mode"
                    sdrMetadata = {
                        string __SDR__enum_value = "color_layer_blend"
                        string description = "top"
                    }
                )
                token outputs:mdl:displacement.connect = </mdl/nvidia/test_types/materialWithEnum/materialWithEnum.outputs:out>
                token outputs:mdl:surface.connect = </mdl/nvidia/test_types/materialWithEnum/materialWithEnum.outputs:out>
                token outputs:mdl:volume.connect = </mdl/nvidia/test_types/materialWithEnum/materialWithEnum.outputs:out>

                def Shader "materialWithEnum"
                {
                    uniform token info:implementationSource = "sourceAsset"
                    uniform asset info:mdl:sourceAsset = @nvidia/test_types.mdl@
                    custom uniform token info:mdl:sourceAsset:subIdentifier = "::nvidia::test_types::materialWithEnum"
                    int inputs:mode.connect = </mdl/nvidia/test_types/materialWithEnum.inputs:mode>
                    token outputs:out
                }
            }

            def Material "diffuse"
            {
                int2[] inputs:bool2_array_of_vectors = [(1, 0), (0, 1)]
                int3[] inputs:bool3_array_of_vectors = [(1, 0, 0), (0, 1, 1)]
                int4[] inputs:bool4_array_of_vectors = [(1, 0, 0, 0), (0, 1, 1, 1)]
                bool[] inputs:bool_array = [1, 0, 1, 0]
                color3f[] inputs:color_array = [(0.8, 0.8, 0.8), (0.8, 0.8, 0.8), (0.8, 0.8, 0.8), (0.8, 0.8, 0.8)]
                color3f inputs:diffuse_color = (0.8, 0.8, 0.8)
                double2[] inputs:double2_array_of_vectors = [(5, 6), (7, 8)]
                double3[] inputs:double3_array_of_vectors = [(5, 6, 7), (7, 8, 9)]
                double4[] inputs:double4_array_of_vectors = [(5, 6, 7, 8), (7, 8, 9, 10)]
                double[] inputs:double_array = [1, 2, 3, 4]
                token inputs:file_tex.connect = </mdl/nvidia/test_types/diffuse/mdl/nvidia/test_types/file_texture__default_call___107.outputs:out>
                float2[] inputs:float2_array_of_vectors = [(1, 2), (3, 4), (5, 6)]
                float3[] inputs:float3_array_of_vectors = [(1, 2, 2.5), (3, 4, 4.5), (5, 6, 6.5)]
                float4[] inputs:float4_array_of_vectors = [(1, 2, 2.5, 2.6), (3, 4, 4.5, 4.6), (5, 6, 6.5, 6.6)]
                float[] inputs:float_array = [1, 2, 3, 4]
                int2[] inputs:int2_array_of_vectors = [(1, 2), (3, 4)]
                int3[] inputs:int3_array_of_vectors = [(1, 2, 3), (4, 5, 6)]
                int4[] inputs:int4_array_of_vectors = [(1, 2, 3, 4), (5, 6, 7, 8)]
                int[] inputs:int_array = [1, 2, 3, 4]
                token inputs:normal.connect = </mdl/nvidia/test_types/diffuse/mdl/state/normal__default_call___110.outputs:out>
                token inputs:perlin_parm.connect = </mdl/nvidia/test_types/diffuse/mdl/nvidia/test_types/perlin_noise_bump_texture__default_call___109.outputs:out>
                float inputs:roughness = 1.234
                string[] inputs:string_array = ["1.0", "2.0", "3.0", "4.0"]
                bool inputs:test_bool = 0
                bool2 inputs:unknown_parameter = (True, False)
                int2 inputs:test_bool2 = (1, 0)
                int3 inputs:test_bool3 = (1, 1, 1)
                int4 inputs:test_bool4 = (1, 1, 1, 1)
                double inputs:test_double = 3.140000104904175
                double2 inputs:test_double2 = (1, 2)
                matrix2d inputs:test_double2x2 = ( (2, 0), (0, 2) )
                double3 inputs:test_double3 = (3, 3, 3)
                matrix3d inputs:test_double3x3 = ( (2, 0, 0), (0, 2, 0), (0, 0, 2) )
                double4 inputs:test_double4 = (4, 4, 4, 4)
                matrix4d inputs:test_double4x4 = ( (2, 0, 0, 0), (0, 2, 0, 0), (0, 0, 2, 0), (0, 0, 0, 2) )
                int inputs:test_enum = 1 (
                    renderType = "::nvidia::test_types::material_type"
                    sdrMetadata = {
                        string __SDR__enum_value = "complex_material"
                        string description = "Complex material"
                    }
                )
                float2 inputs:test_float2 = (1, 2)
                matrix2d inputs:test_float2x2 = ( (1, 2), (3, 4) )
                float3 inputs:test_float3 = (3, 3, 3)
                matrix2d inputs:test_float3x2
                matrix3d inputs:test_float3x3 = ( (1, 0, 0), (0, 1, 0), (0, 0, 1) )
                float4 inputs:test_float4 = (4, 4, 4, 4)
                matrix4d inputs:test_float4x4 = ( (2, 0, 0, 0), (0, 2, 0, 0), (0, 0, 2, 0), (0, 0, 0, 2) )
                int inputs:test_int = 1
                int2 inputs:test_int2 = (1, 2)
                int3 inputs:test_int3 = (3, 3, 3)
                int4 inputs:test_int4 = (4, 4, 4, 4)
                string inputs:test_string = "Test string foobar"
                token inputs:test_struct
                asset inputs:test_texture = @/nvidia/dummy.jpg@
                token outputs:mdl:displacement.connect = </mdl/nvidia/test_types/diffuse/MDL_diffuse.outputs:out>
                token outputs:mdl:surface.connect = </mdl/nvidia/test_types/diffuse/MDL_diffuse.outputs:out>
                token outputs:mdl:volume.connect = </mdl/nvidia/test_types/diffuse/MDL_diffuse.outputs:out>

                def Shader "MDL_diffuse"
                {
                    uniform token info:implementationSource = "sourceAsset"
                    uniform asset info:mdl:sourceAsset = @nvidia/test_types.mdl@
                    custom uniform token info:mdl:sourceAsset:subIdentifier = "::nvidia::test_types::diffuse"
                    int2[] inputs:bool2_array_of_vectors.connect = </mdl/nvidia/test_types/diffuse.inputs:bool2_array_of_vectors>
                    int3[] inputs:bool3_array_of_vectors.connect = </mdl/nvidia/test_types/diffuse.inputs:bool3_array_of_vectors>
                    int4[] inputs:bool4_array_of_vectors.connect = </mdl/nvidia/test_types/diffuse.inputs:bool4_array_of_vectors>
                    bool[] inputs:bool_array.connect = </mdl/nvidia/test_types/diffuse.inputs:bool_array>
                    color3f[] inputs:color_array.connect = </mdl/nvidia/test_types/diffuse.inputs:color_array>
                    color3f inputs:diffuse_color.connect = </mdl/nvidia/test_types/diffuse.inputs:diffuse_color>
                    double2[] inputs:double2_array_of_vectors.connect = </mdl/nvidia/test_types/diffuse.inputs:double2_array_of_vectors>
                    double3[] inputs:double3_array_of_vectors.connect = </mdl/nvidia/test_types/diffuse.inputs:double3_array_of_vectors>
                    double4[] inputs:double4_array_of_vectors.connect = </mdl/nvidia/test_types/diffuse.inputs:double4_array_of_vectors>
                    double[] inputs:double_array.connect = </mdl/nvidia/test_types/diffuse.inputs:double_array>
                    token inputs:file_tex.connect = </mdl/nvidia/test_types/diffuse.inputs:file_tex>
                    float2[] inputs:float2_array_of_vectors.connect = </mdl/nvidia/test_types/diffuse.inputs:float2_array_of_vectors>
                    float3[] inputs:float3_array_of_vectors.connect = </mdl/nvidia/test_types/diffuse.inputs:float3_array_of_vectors>
                    float4[] inputs:float4_array_of_vectors.connect = </mdl/nvidia/test_types/diffuse.inputs:float4_array_of_vectors>
                    float[] inputs:float_array.connect = </mdl/nvidia/test_types/diffuse.inputs:float_array>
                    int2[] inputs:int2_array_of_vectors.connect = </mdl/nvidia/test_types/diffuse.inputs:int2_array_of_vectors>
                    int3[] inputs:int3_array_of_vectors.connect = </mdl/nvidia/test_types/diffuse.inputs:int3_array_of_vectors>
                    int4[] inputs:int4_array_of_vectors.connect = </mdl/nvidia/test_types/diffuse.inputs:int4_array_of_vectors>
                    int[] inputs:int_array.connect = </mdl/nvidia/test_types/diffuse.inputs:int_array>
                    token inputs:normal.connect = </mdl/nvidia/test_types/diffuse.inputs:normal>
                    token inputs:perlin_parm.connect = </mdl/nvidia/test_types/diffuse.inputs:perlin_parm>
                    float inputs:roughness.connect = </mdl/nvidia/test_types/diffuse.inputs:roughness>
                    string[] inputs:string_array.connect = </mdl/nvidia/test_types/diffuse.inputs:string_array>
                    bool inputs:test_bool.connect = </mdl/nvidia/test_types/diffuse.inputs:test_bool>
                    int2 inputs:test_bool2.connect = </mdl/nvidia/test_types/diffuse.inputs:test_bool2>
                    int3 inputs:test_bool3.connect = </mdl/nvidia/test_types/diffuse.inputs:test_bool3>
                    int4 inputs:test_bool4.connect = </mdl/nvidia/test_types/diffuse.inputs:test_bool4>
                    double inputs:test_double.connect = </mdl/nvidia/test_types/diffuse.inputs:test_double>
                    double2 inputs:test_double2.connect = </mdl/nvidia/test_types/diffuse.inputs:test_double2>
                    matrix2d inputs:test_double2x2.connect = </mdl/nvidia/test_types/diffuse.inputs:test_double2x2>
                    double3 inputs:test_double3.connect = </mdl/nvidia/test_types/diffuse.inputs:test_double3>
                    matrix3d inputs:test_double3x3.connect = </mdl/nvidia/test_types/diffuse.inputs:test_double3x3>
                    double4 inputs:test_double4.connect = </mdl/nvidia/test_types/diffuse.inputs:test_double4>
                    matrix4d inputs:test_double4x4.connect = </mdl/nvidia/test_types/diffuse.inputs:test_double4x4>
                    int inputs:test_enum.connect = </mdl/nvidia/test_types/diffuse.inputs:test_enum>
                    float2 inputs:test_float2.connect = </mdl/nvidia/test_types/diffuse.inputs:test_float2>
                    matrix2d inputs:test_float2x2.connect = </mdl/nvidia/test_types/diffuse.inputs:test_float2x2>
                    float3 inputs:test_float3.connect = </mdl/nvidia/test_types/diffuse.inputs:test_float3>
                    matrix2d inputs:test_float3x2.connect = </mdl/nvidia/test_types/diffuse.inputs:test_float3x2>
                    matrix3d inputs:test_float3x3.connect = </mdl/nvidia/test_types/diffuse.inputs:test_float3x3>
                    float4 inputs:test_float4.connect = </mdl/nvidia/test_types/diffuse.inputs:test_float4>
                    matrix4d inputs:test_float4x4.connect = </mdl/nvidia/test_types/diffuse.inputs:test_float4x4>
                    int inputs:test_int.connect = </mdl/nvidia/test_types/diffuse.inputs:test_int>
                    int2 inputs:test_int2.connect = </mdl/nvidia/test_types/diffuse.inputs:test_int2>
                    int3 inputs:test_int3.connect = </mdl/nvidia/test_types/diffuse.inputs:test_int3>
                    int4 inputs:test_int4.connect = </mdl/nvidia/test_types/diffuse.inputs:test_int4>
                    string inputs:test_string.connect = </mdl/nvidia/test_types/diffuse.inputs:test_string>
                    token inputs:test_struct.connect = </mdl/nvidia/test_types/diffuse.inputs:test_struct>
                    asset inputs:test_texture.connect = </mdl/nvidia/test_types/diffuse.inputs:test_texture>
                    token outputs:out
                }

                def "mdl"
                {
                    def "nvidia"
                    {
                        def "test_types"
                        {
                            def Shader "file_texture__default_call___107"
                            {
                                uniform token info:id = "::nvidia::test_types::file_texture(texture_2d,::base::mono_mode,float,float,float2,float2,float,bool,int,bool)"
                                uniform token info:implementationSource = "id"
                                float inputs:brightness = 1
                                bool inputs:clip = 0
                                float inputs:contrast = 1
                                bool inputs:invert = 0
                                int inputs:mono_source = 1 (
                                    renderType = "::base::mono_mode"
                                    sdrMetadata = {
                                        string __SDR__enum_value = "mono_average"
                                        string description = "Average intensity of RGB is used"
                                    }
                                )
                                float inputs:rotation = 0
                                float2 inputs:scaling = (1, 1)
                                asset inputs:texture = @/nvidia/dummy.jpg@
                                int inputs:texture_space = 0
                                float2 inputs:translation = (0, 0)
                                token outputs:out
                            }

                            def Shader "perlin_noise_bump_texture__default_call___109"
                            {
                                uniform token info:id = "::nvidia::test_types::perlin_noise_bump_texture(float,float3,int,bool,bool,float,float,float3,float3,int)"
                                uniform token info:implementationSource = "id"
                                bool inputs:absolute_noise = 0
                                token inputs:factor.connect = </mdl/nvidia/test_types/diffuse/mdl/nvidia/test_types/dummy_float_function__default_call___108.outputs:out>
                                int inputs:noise_levels = 1
                                float inputs:noise_threshold_high = 1
                                float inputs:noise_threshold_low = 0
                                bool inputs:object_space = 1
                                float3 inputs:rotation = (0, 0, 0)
                                float3 inputs:scaling = (10, 10, 10)
                                int inputs:texture_space = 0
                                float3 inputs:translation = (0, 0, 0)
                                token outputs:out
                            }

                            def Shader "dummy_float_function__default_call___108"
                            {
                                uniform token info:id = "::nvidia::test_types::dummy_float_function()"
                                uniform token info:implementationSource = "id"
                                token outputs:out
                            }
                        }
                    }

                    def "state"
                    {
                        def Shader "normal__default_call___110"
                        {
                            uniform token info:id = "::state::normal()"
                            uniform token info:implementationSource = "id"
                            token outputs:out
                        }
                    }
                }
            }
        }
    }
}

