diff --git a/pxr/imaging/lib/hd/rprim.cpp b/pxr/imaging/lib/hd/rprim.cpp
index f06027111..9c78b7fa7 100644
--- a/pxr/imaging/lib/hd/rprim.cpp
+++ b/pxr/imaging/lib/hd/rprim.cpp
@@ -130,14 +130,6 @@ HdRprim::PropagateRprimDirtyBits(HdDirtyBits bits)
                  HdChangeTracker::DirtyPrimvar);
     }
 
-	//+NV_FRZHANG CHANGE
-	if (bits & (HdChangeTracker::DirtyTopology | HdChangeTracker::DirtyPoints))
-	{
-		bits |= HdChangeTracker::NV_DirtySkinningBinding;
-		bits |= HdChangeTracker::NV_DirtySkelAnimXform;
-	}
-	//-NV_FRZHANG CHANGE
-
     // Let subclasses propagate bits
     return _PropagateDirtyBits(bits);
 }
diff --git a/pxr/imaging/lib/hdSt/mesh.cpp b/pxr/imaging/lib/hdSt/mesh.cpp
index 857229b21..d417fe923 100644
--- a/pxr/imaging/lib/hdSt/mesh.cpp
+++ b/pxr/imaging/lib/hdSt/mesh.cpp
@@ -2186,10 +2186,6 @@ HdStMesh::GetInitialDirtyBitsMask() const
         | HdChangeTracker::DirtyTopology
         | HdChangeTracker::DirtyTransform
         | HdChangeTracker::DirtyVisibility
-		//+NV_FRZHANG CHANGE
-		| HdChangeTracker::NV_DirtySkinningBinding
-		| HdChangeTracker::NV_DirtySkelAnimXform
-		//-NV_FRZHANG CHANGE
         ;
 
     return mask;
diff --git a/pxr/usd/lib/usdSkel/animQuery.cpp b/pxr/usd/lib/usdSkel/animQuery.cpp
index 71eb7f5e0..53ac81858 100644
--- a/pxr/usd/lib/usdSkel/animQuery.cpp
+++ b/pxr/usd/lib/usdSkel/animQuery.cpp
@@ -192,22 +192,4 @@ UsdSkelAnimQuery::GetDescription() const
     return "invalid UsdSkelAnimQuery";
 }
 
-
-//+NV_CHANGE FRZHANG
-GfInterval
-UsdSkelAnimQuery::GetTimeRange() const
-{
-	if (_impl)
-	{
-		std::vector<double> times;
-		_impl->GetJointTransformTimeSamples(GfInterval(0.0, FLT_MAX, true, false), &times);
-		if (times.size() > 0)
-		{
-			return GfInterval(times[0], times[times.size() - 1], true, true);
-		}
-	}
-	return GfInterval();
-}
-//-NV_CHANGE FRZHANG
-
 PXR_NAMESPACE_CLOSE_SCOPE
diff --git a/pxr/usd/lib/usdSkel/animQuery.h b/pxr/usd/lib/usdSkel/animQuery.h
index bdd4b8dd9..2eb485735 100644
--- a/pxr/usd/lib/usdSkel/animQuery.h
+++ b/pxr/usd/lib/usdSkel/animQuery.h
@@ -179,12 +179,6 @@ public:
     USDSKEL_API
     std::string GetDescription() const;
 
-	//+NV_CHANGE FRZHANG
-	//Return the Animatation Range
-	USDSKEL_API
-	GfInterval	GetTimeRange() const;
-	//-NV_CHANGE FRZHANG
-
 private:
     UsdSkelAnimQuery(const UsdSkel_AnimQueryImplRefPtr& impl)
         :  _impl(impl) {}
diff --git a/pxr/usd/lib/usdSkel/skinningQuery.cpp b/pxr/usd/lib/usdSkel/skinningQuery.cpp
index 0b7dd08c9..b1b2341f3 100644
--- a/pxr/usd/lib/usdSkel/skinningQuery.cpp
+++ b/pxr/usd/lib/usdSkel/skinningQuery.cpp
@@ -339,41 +339,6 @@ UsdSkelSkinningQuery::ComputeSkinnedPoints(const VtArray<Matrix4>& xforms,
     return false;
 }
 
-//+NV_CHANGE TAE
-// Added cached joint indices, weights 
-bool
-UsdSkelSkinningQuery::ComputeSkinnedPoints(const VtMatrix4dArray& xforms,
-	const VtIntArray& jointIndices,
-	const VtFloatArray& jointWeights,
-	VtVec3fArray* points,
-	UsdTimeCode time) const
-{
-	TRACE_FUNCTION();
-
-	if (!points) {
-		TF_CODING_ERROR("'points' pointer is null.");
-		return false;
-	}
-
-	// If the binding site has a custom joint ordering, the query will have
-	// a mapper that should be used to reorder transforms
-	// (skel order -> binding order)
-	VtMatrix4dArray orderedXforms(xforms);
-	if (_mapper) {
-		if (!_mapper->Remap(xforms, &orderedXforms)) {
-			return false;
-		}
-	}
-
-	GfMatrix4d geomBindXform = GetGeomBindTransform(time);
-	return UsdSkelSkinPointsLBS(geomBindXform, orderedXforms,
-		jointIndices, jointWeights,
-		_numInfluencesPerComponent, points);
-
-	//return false;
-}
-//-NV_CHANGE TAE
-
 template USDSKEL_API bool
 UsdSkelSkinningQuery::ComputeSkinnedPoints(const VtArray<GfMatrix4d>&,
                                            VtVec3fArray*, UsdTimeCode) const;
diff --git a/pxr/usd/lib/usdSkel/skinningQuery.h b/pxr/usd/lib/usdSkel/skinningQuery.h
index 29dc27d77..595d46e68 100644
--- a/pxr/usd/lib/usdSkel/skinningQuery.h
+++ b/pxr/usd/lib/usdSkel/skinningQuery.h
@@ -180,21 +180,6 @@ public:
                               VtVec3fArray* points,
                               UsdTimeCode time=UsdTimeCode::Default()) const;
 
-	//+NV_CHANGE TAE
-	/// Both \p xforms and \p points are given in _skeleton space_,
-	/// using the joint order of the bound skeleton.
-	/// Joint influences and the (optional) binding transform are computed
-	/// at time \p time (which will typically be unvarying).
-	///
-	/// \sa UsdSkelSkeletonQuery::ComputeSkinningTransforms
-	USDSKEL_API
-		bool ComputeSkinnedPoints(const VtMatrix4dArray& xforms,
-			const VtIntArray& jointIndices,
-			const VtFloatArray& jointWeights,
-			VtVec3fArray* points,
-			UsdTimeCode time = UsdTimeCode::Default()) const;
-	//-NV_CHANGE TAE
-
     /// Compute a skinning transform using linear blend skinning.
     /// The \p xforms are given in _skeleton space_, using the joint order of
     /// the bound skeleton.
diff --git a/pxr/usdImaging/lib/usdImaging/meshAdapter.cpp b/pxr/usdImaging/lib/usdImaging/meshAdapter.cpp
index 9a4402fc6..ee3091858 100644
--- a/pxr/usdImaging/lib/usdImaging/meshAdapter.cpp
+++ b/pxr/usdImaging/lib/usdImaging/meshAdapter.cpp
@@ -41,11 +41,8 @@
 #include "pxr/usd/usdGeom/xformCache.h"
 
 #include "pxr/base/tf/type.h"
-
 //+NV_CHANGE FRZHANG
-#include "pxr/usd/usdSkel/root.h"
-#include "pxr/usd/usdSkel/bindingAPI.h"
-#include "pxr/usd/usdSkel/cache.h"
+#include "pxr/base/gf/matrix4f.h"
 //-NV_CHANGE FRZHANG
 
 PXR_NAMESPACE_OPEN_SCOPE
@@ -92,54 +89,11 @@ UsdImagingMeshAdapter::Populate(UsdPrim const& prim,
                 }
             }
         }
-
-
-        //+NV_CHANGE FRZHANG
-        //Detect if mesh has skel binding to trigge skel mesh update.
-        //Backup the skinningquery skeletonquery, jointindices/weights for acceleratioin
-        _InitSkinningInfo(prim);
-        //-NV_CHANGE FRZHANG
     }
     return _AddRprim(HdPrimTypeTokens->mesh,
         prim, index, GetMaterialId(prim), instancerContext);
 }
 
-//+NV_CHANGE FRZHANG
-UsdImagingMeshAdapter::_SkinningData*
-UsdImagingMeshAdapter::_GetSkinningData(const SdfPath& cachePath) const
-{
-    auto it = _skinningDataCache.find(cachePath);
-    return it != _skinningDataCache.end() ? it->second.get() : nullptr;
-}
-
-void
-UsdImagingMeshAdapter::_InitSkinningInfo(UsdPrim const& prim)
-{
-    bool isSkinningMesh = prim.HasAPI<UsdSkelBindingAPI>();
-    if (isSkinningMesh)
-    {
-        auto skinningData = std::make_shared<_SkinningData>();
-        _skinningDataCache[prim.GetPath()] = skinningData;
-
-        UsdSkelBindingAPI bindingAPI(prim);
-        pxr::UsdSkelSkeleton skeleton;
-        bindingAPI.GetSkeleton(&skeleton);
-
-        UsdSkelRoot skelRoot = UsdSkelRoot::Find(prim);
-        UsdSkelCache skelCache;
-        skelCache.Populate(skelRoot);
-        skinningData->skinningQuery = skelCache.GetSkinningQuery(prim);
-        skinningData->skeletonQuery = skelCache.GetSkelQuery(skeleton);
-        skinningData->skinningQuery.ComputeJointInfluences(
-            &skinningData->jointIndices, &skinningData->jointWeights);
-        skinningData->animTimeInterval = skinningData->skeletonQuery.GetAnimQuery().GetTimeRange();
-        skinningData->lastUpdateTime = -1.0f;
-        //printf("Init SkinningData for %s AnimRange %f -  %f\n", prim.GetPath().GetText(), (float)skinningData->animTimeInterval.GetMin(), (float)skinningData->animTimeInterval.GetMax());
-    }
-}
-//_NV_CHANGE FRZHANG
-
-
 void
 UsdImagingMeshAdapter::TrackVariability(UsdPrim const& prim,
     SdfPath const& cachePath,
@@ -167,23 +121,6 @@ UsdImagingMeshAdapter::TrackVariability(UsdPrim const& prim,
         timeVaryingBits,
         /*isInherited*/false);
 
-
-    //+NV_CHANGE FRZHANG
-    _SkinningData* skinningData = _GetSkinningData(cachePath);
-    if (skinningData != nullptr)
-    {
-        //printf("variability setting dirty bits for skinning mesh %s\n", prim.GetPath().GetText());
-        if (UsdImagingMeshAdapter::USE_NV_GPUSKINNING)
-        {
-            (*timeVaryingBits) |= HdChangeTracker::NV_DirtySkelAnimXform;
-        }
-        else
-        {
-            (*timeVaryingBits) |= HdChangeTracker::DirtyPoints;
-        }
-    }
-    //-NV_CHANGE FRZHANG
-
     // Discover time-varying primvars:normals, and if that attribute
     // doesn't exist also check for time-varying normals.
     // Only do this for polygonal meshes.
@@ -300,7 +237,6 @@ UsdImagingMeshAdapter::_RemovePrim(SdfPath const& cachePath,
         index->MarkRprimDirty(cachePath.GetParentPath(),
             HdChangeTracker::DirtyTopology);
     }
-    _skinningDataCache.erase(cachePath);
 }
 
 bool
@@ -310,26 +246,6 @@ UsdImagingMeshAdapter::_IsBuiltinPrimvar(TfToken const& primvarName) const
         UsdImagingGprimAdapter::_IsBuiltinPrimvar(primvarName);
 }
 
-// #nv begin #gpu-skinning
-// +NV_CHANGE FRZHANG
-/*virtual*/
-VtValue
-UsdImagingMeshAdapter::GetPoints(UsdPrim const& prim,
-    SdfPath const& cachePath,
-    UsdTimeCode time) const
-{
-    VtValue points = UsdImagingGprimAdapter::GetPoints(prim, cachePath, time);
-    _SkinningData* skinningData = _GetSkinningData(cachePath);
-    if (skinningData && !UsdImagingMeshAdapter::USE_NV_GPUSKINNING) {
-        //skinningQuery's CPU skinning
-        skinningData->ComputeSkinningPoints(prim, &points, time);
-    }
-
-    return points;
-}
-// -NV_CHANGE FRZHANG
-// nv end
-
 void
 UsdImagingMeshAdapter::UpdateForTime(UsdPrim const& prim,
     SdfPath const& cachePath,
@@ -391,37 +307,6 @@ UsdImagingMeshAdapter::UpdateForTime(UsdPrim const& prim,
             _GetSubdivTags(prim, &tags, time);
         }
     }
-
-
-    //+NV_CHANGE FRZHANG 
-    if (UsdImagingMeshAdapter::USE_NV_GPUSKINNING)
-    {
-        if (requestedBits & HdChangeTracker::NV_DirtySkinningBinding) {
-            _SkinningData* skinningData = _GetSkinningData(cachePath);
-            if (skinningData)
-            {
-                GfMatrix4d& geomBindXform = valueCache->GetGeomBindXform(cachePath);
-                skinningData->GetBindXform(&geomBindXform, time);
-                valueCache->GetRestPoints(cachePath) = GetPoints(prim, cachePath, time);
-                VtValue& jointIndices = valueCache->GetJointIndices(cachePath);
-                VtValue& jointWeights = valueCache->GetJointWeights(cachePath);
-                int& numInfluencesPerPoint = valueCache->GetNumInfluencesPerPoint(cachePath);
-                bool& hasConstantInfluences = valueCache->GetHasConstantInfluences(cachePath);
-                skinningData->GetBlendValues(&jointIndices, &jointWeights, &numInfluencesPerPoint, &hasConstantInfluences);
-            }
-        }
-        if (requestedBits & HdChangeTracker::NV_DirtySkelAnimXform) {
-            _SkinningData* skinningData = _GetSkinningData(cachePath);
-            if (skinningData)
-            {
-                VtValue& skinningXforms = valueCache->GetSkinningXforms(cachePath);
-                GfMatrix4d& primWorldToLocal = valueCache->GetPrimWorldToLocal(cachePath);
-                GfMatrix4d& skelLocalToWorld = valueCache->GetSkelLocalToWorld(cachePath);
-                skinningData->ComputeSkelAnimValues(&skinningXforms, &primWorldToLocal, &skelLocalToWorld, time);
-            }
-        }
-    }
-    //-NV_CHANGE FRZHANG
 }
 
 HdDirtyBits
@@ -554,119 +439,41 @@ UsdImagingMeshAdapter::_GetSubdivTags(UsdPrim const& prim,
     tags->SetCornerWeights(cornerSharpnesses);
 }
 
-//+NV_CHANGE FRZHANG
+// #nv begin #gpu-skinning
+// +NV_CHANGE FRZHANG : Skel Animation Update API
 void
-UsdImagingMeshAdapter::_SkinningData::ComputeSkinningPoints(UsdPrim const& prim,
-    VtValue* value,
-    UsdTimeCode time)
+UsdImagingMeshAdapter::UpdateRestPoints(UsdPrim const& prim, SdfPath const& cachePath, UsdTimeCode time,
+    const VtVec3fArray& restPoints)
 {
-    HD_TRACE_FUNCTION();
-    HF_MALLOC_TAG_FUNCTION();
-
-    VtMatrix4dArray xforms;
-
-#define TIME_RANGE_OPTIMIZATION 0
-#if TIME_RANGE_OPTIMIZATION
-    //Time range optimization
-    double desiredUpdateTime = time.GetValue();
-    if (!animTimeInterval.Contains(desiredUpdateTime))
-    {
-        if (desiredUpdateTime < animTimeInterval.GetMin())desiredUpdateTime = animTimeInterval.GetMin();
-        if (desiredUpdateTime > animTimeInterval.GetMax())desiredUpdateTime = animTimeInterval.GetMax();
-    }
-    bool bShouldUpdate = false;
-    bShouldUpdate |= lastUpdateTime < 0;
-    bShouldUpdate |= desiredUpdateTime != lastUpdateTime;
-    lastUpdateTime = desiredUpdateTime;
-    if (!bShouldUpdate)
-    {
-        //printf("skin update for %s at time %f, original data count %d\n", prim.GetPath().GetText(), time.GetValue(), value->GetArraySize());
-        return;
-    }
-#endif
-
-    if (skeletonQuery.ComputeSkinningTransforms(&xforms, time))
-    {
-
-        VtVec3fArray skinningPoints;
-        prim.GetAttribute(UsdGeomTokens->points).Get(&skinningPoints, time);
-        if (skinningQuery.ComputeSkinnedPoints(xforms, jointIndices, jointWeights, &skinningPoints, time))
-        {
-            UsdGeomXformCache xfCache;
-            xfCache.SetTime(time);
-            GfMatrix4d gprimLocalToWorld =
-                xfCache.GetLocalToWorldTransform(prim);
-
-            GfMatrix4d skelLocalToWorld =
-                xfCache.GetLocalToWorldTransform(skeletonQuery.GetPrim());
-
-            GfMatrix4d skelToGprimXf =
-                skelLocalToWorld * gprimLocalToWorld.GetInverse();
-
-            for (auto& pt : skinningPoints) {
-                pt = skelToGprimXf.Transform(pt);
-            }
-
-            *value = skinningPoints;
-            return;
-        }
-    }
-
-    *value = VtVec3fArray();
-}
-
-
-bool
-UsdImagingMeshAdapter::_SkinningData::GetBlendValues(VtValue* jointIndices, VtValue* jointWeights, int* numInfluencesPerPoint, bool* hasConstantInfluences, UsdTimeCode time)
-{
-    VtIntArray ji;
-    VtFloatArray jw;
-    if (skinningQuery.ComputeJointInfluences(&ji, &jw, time))
-    {
-        *jointIndices = ji;
-        *jointWeights = jw;
-        *numInfluencesPerPoint = skinningQuery.GetNumInfluencesPerComponent();
-        *hasConstantInfluences = skinningQuery.IsRigidlyDeformed();
-        //*hasConstantInfluences = false;
-        return true;
-    }
-    *jointIndices = VtIntArray();
-    *jointWeights = VtFloatArray();
-    *numInfluencesPerPoint = 0;
-    *hasConstantInfluences = false;
-    return false;
+    UsdImagingValueCache* valueCache = _GetValueCache();
+    valueCache->GetPoints(cachePath) = restPoints;
+    valueCache->GetRestPoints(cachePath) = restPoints;
 }
 
-
-bool
-UsdImagingMeshAdapter::_SkinningData::GetBindXform(GfMatrix4d* geomBindXform, UsdTimeCode time)
+void
+UsdImagingMeshAdapter::UpdateSkinningBinding(UsdPrim const& prim, SdfPath const& cachePath, UsdTimeCode time,
+    const GfMatrix4d& bindTransform,
+    const VtIntArray& jointIndices, const VtFloatArray jointWeights,
+    int numInfluencesPerPoint, bool hasConstantInfluences
+)
 {
-    *geomBindXform = skinningQuery.GetGeomBindTransform(time);
-    return true;
+    UsdImagingValueCache* valueCache = _GetValueCache();
+    valueCache->GetGeomBindXform(cachePath) = bindTransform;
+    valueCache->GetJointIndices(cachePath) = jointIndices;
+    valueCache->GetJointWeights(cachePath) = jointWeights;
+    valueCache->GetNumInfluencesPerPoint(cachePath) = numInfluencesPerPoint;
+    valueCache->GetHasConstantInfluences(cachePath) = hasConstantInfluences;
 }
 
-
-bool
-UsdImagingMeshAdapter::_SkinningData::ComputeSkelAnimValues(VtValue* skinningXform, GfMatrix4d* primWorldToLocal, GfMatrix4d* skelLocalToWorld, UsdTimeCode time)
+void
+UsdImagingMeshAdapter::UpdateSkelAnim(UsdPrim const& prim, SdfPath const& cachePath, UsdTimeCode time,
+    const VtMatrix4fArray& skelAnim, const GfMatrix4d& primWorldToLocal, const GfMatrix4d& skelLocalToWorld)
 {
-    VtMatrix4dArray xforms;
-    if (skeletonQuery.ComputeSkinningTransforms(&xforms, time))
-    {
-        *skinningXform = xforms;
-        UsdGeomXformCache xformCache(time);
-        UsdPrim const& prim = skinningQuery.GetPrim();
-        *primWorldToLocal = xformCache.GetLocalToWorldTransform(prim).GetInverse();
-        UsdPrim const& skelPrim = skeletonQuery.GetPrim();
-        *skelLocalToWorld =
-            xformCache.GetLocalToWorldTransform(skelPrim);
-        return true;
-    }
-    *primWorldToLocal = GfMatrix4d(1);
-    *skinningXform = VtMatrix4dArray();
-    *skelLocalToWorld = GfMatrix4d(1);
-    return false;
+    UsdImagingValueCache* valueCache = _GetValueCache();
+    valueCache->GetSkinningXforms(cachePath) = skelAnim;
+    valueCache->GetPrimWorldToLocal(cachePath) = primWorldToLocal;
+    valueCache->GetSkelLocalToWorld(cachePath) = skelLocalToWorld;
 }
 //-NV_CHANGE FRZHANG
 
-
 PXR_NAMESPACE_CLOSE_SCOPE
\ No newline at end of file
diff --git a/pxr/usdImaging/lib/usdImaging/meshAdapter.h b/pxr/usdImaging/lib/usdImaging/meshAdapter.h
index a593b4eae..5ce7486dc 100644
--- a/pxr/usdImaging/lib/usdImaging/meshAdapter.h
+++ b/pxr/usdImaging/lib/usdImaging/meshAdapter.h
@@ -31,13 +31,6 @@
 #include "pxr/usdImaging/usdImaging/primAdapter.h"
 #include "pxr/usdImaging/usdImaging/gprimAdapter.h"
 
-//+NV_CHANGE FRZHANG
-#include "pxr/usd/usdSkel/skinningQuery.h"
-#include "pxr/usd/usdSkel/skeletonQuery.h"
-
-#include <boost/unordered_map.hpp>
-//_NV_CHANGE FRZHANG
-
 PXR_NAMESPACE_OPEN_SCOPE
 
 
@@ -90,6 +83,25 @@ public:
                                UsdImagingInstancerContext const* 
                                    instancerContext = NULL) const override;
 
+    //+NV_CHANGE FRZHANG
+    /////+++Update Skinning Animation API
+    USDIMAGING_API
+        void UpdateRestPoints(UsdPrim const& prim, SdfPath const& cachePath, UsdTimeCode time,
+            const VtVec3fArray& restPoints);
+
+    USDIMAGING_API
+        void UpdateSkinningBinding(UsdPrim const& prim, SdfPath const& cachePath, UsdTimeCode time,
+            const GfMatrix4d& bindTransform,
+            const VtIntArray& jointIndices, const VtFloatArray jointweights,
+            int numInfluencesPerPoint, bool hasConstantInfluences
+        );
+
+    USDIMAGING_API
+        void UpdateSkelAnim(UsdPrim const& prim, SdfPath const& cachePath, UsdTimeCode time,
+            const VtMatrix4fArray& skelAnim, const GfMatrix4d& primWorldToLocal, const GfMatrix4d& skelLocalToWorld
+        );
+    //-NV_CHANGE FRZHANG
+
     // ---------------------------------------------------------------------- //
     /// \name Change Processing
     // ---------------------------------------------------------------------- //
@@ -109,15 +121,6 @@ public:
                                       SdfPath const& cachePath,
                                       UsdImagingIndexProxy* index) override;
 
-    //+NV_CHANGE FRZHANG
-    USDIMAGING_API
-    virtual VtValue GetPoints(UsdPrim const& prim,
-                              SdfPath const& cachePath,
-                              UsdTimeCode time) const override;
-    USDIMAGING_API
-    static const bool USE_NV_GPUSKINNING = true;
-    //-NV_CHANGE FRZHANG
-
 protected:
     USDIMAGING_API
     virtual void _RemovePrim(SdfPath const& cachePath,
@@ -132,28 +135,6 @@ private:
     void _GetSubdivTags(UsdPrim const& prim, SubdivTags* tags, 
             UsdTimeCode time) const ;
 
-	//+NV_CHANGE FRZHANG
-	void _InitSkinningInfo(UsdPrim const& prim);
-	struct _SkinningData
-	{
-		void ComputeSkinningPoints(UsdPrim const& prim, VtValue* value, UsdTimeCode time);
-		bool GetBlendValues(VtValue* jointIndices, VtValue* jointWeights, int* numInfluencesPerPoint, bool* hasConstantInfluences, UsdTimeCode time = 0.0);
-		bool GetBindXform(GfMatrix4d* geomBindXform, UsdTimeCode time = 0.0);
-		bool ComputeSkelAnimValues(VtValue* skinningXform, GfMatrix4d* primWorldToLocal, GfMatrix4d* skelLocalToWorld, UsdTimeCode time);
-
-		UsdSkelSkinningQuery	skinningQuery;
-		UsdSkelSkeletonQuery	skeletonQuery;
-		VtIntArray				jointIndices;
-		VtFloatArray			jointWeights;
-		GfInterval				animTimeInterval;
-		double					lastUpdateTime;
-		bool					isSkinningMesh;
-	};
-
-	_SkinningData* _GetSkinningData(const SdfPath& cachePath) const;
-	using _SkinningDataMap = boost::unordered_map<SdfPath, std::shared_ptr<_SkinningData> >;
-	_SkinningDataMap			_skinningDataCache;
-	//-NV_CHANGE FRZHANG
 };
 
 
diff --git a/pxr/usdImaging/lib/usdImaging/valueCache.h b/pxr/usdImaging/lib/usdImaging/valueCache.h
index d927ce26f..cf7c46de6 100644
--- a/pxr/usdImaging/lib/usdImaging/valueCache.h
+++ b/pxr/usdImaging/lib/usdImaging/valueCache.h
@@ -312,7 +312,7 @@ private:
 		std::swap(it->second, *value);
 		      cache->_deferredDeleteQueue.push(key);
 #endif
-		//-NV_CHANGE FRZHANg
+		//-NV_CHANGE FRZHANG
         return true;
     }
 
diff --git a/pxr/usdImaging/lib/usdSkelImaging/skelRootAdapter.cpp b/pxr/usdImaging/lib/usdSkelImaging/skelRootAdapter.cpp
index 153c31806..1624d306e 100644
--- a/pxr/usdImaging/lib/usdSkelImaging/skelRootAdapter.cpp
+++ b/pxr/usdImaging/lib/usdSkelImaging/skelRootAdapter.cpp
@@ -30,6 +30,7 @@
 #include "pxr/usdImaging/usdImaging/indexProxy.h"
 #include "pxr/usdImaging/usdImaging/tokens.h"
 
+
 #include "pxr/imaging/hd/perfLog.h"
 
 #include "pxr/usd/usd/primRange.h"
diff --git a/pxr/usdImaging/lib/usdSkelImaging/skeletonAdapter.cpp b/pxr/usdImaging/lib/usdSkelImaging/skeletonAdapter.cpp
index 838e12d24..dcbeb3db5 100644
--- a/pxr/usdImaging/lib/usdSkelImaging/skeletonAdapter.cpp
+++ b/pxr/usdImaging/lib/usdSkelImaging/skeletonAdapter.cpp
@@ -30,6 +30,9 @@
 #include "pxr/usdImaging/usdImaging/gprimAdapter.h"
 #include "pxr/usdImaging/usdImaging/indexProxy.h"
 #include "pxr/usdImaging/usdImaging/tokens.h"
+//+NV_CHANGE FRZHANG
+#include "pxr/usdImaging/usdImaging/meshAdapter.h"
+//-NV_CHANGE FRZHANG
 
 #include "pxr/usd/usdGeom/boundable.h"
 #include "pxr/usd/usdGeom/pointBased.h"
@@ -93,6 +96,11 @@ TF_DEFINE_PRIVATE_TOKENS(
 TF_DEFINE_ENV_SETTING(USDSKELIMAGING_FORCE_CPU_COMPUTE, 0,
     "Use Hydra ExtCPU computations for skinning.");
 
+//+NV_CHANGE FRZHANG : usd nv gpuskinning instead of hydra skinning compute.
+TF_DEFINE_ENV_SETTING(USDSKELIMAGING_FORCE_NVGPUSKINNING, 0,
+    "Use NVIDIA GPUSKining computations for skinning.");
+//-NV_CHANGE FRZHANG
+
 TF_REGISTRY_FUNCTION(TfType)
 {
     using Adapter = UsdSkelImagingSkeletonAdapter;
@@ -100,6 +108,15 @@ TF_REGISTRY_FUNCTION(TfType)
     t.SetFactory< UsdImagingPrimAdapterFactory<Adapter> >();
 }
 
+//+NV_CHANGE FRZHANG
+static bool
+_IsNVGPUSkinningComputations()
+{
+    static bool enabled
+        = (TfGetEnvSetting(USDSKELIMAGING_FORCE_NVGPUSKINNING) == 1);
+    return enabled;
+}
+//-NV_CHANGE FRZHANG
 // XXX: Temporary way to force CPU comps. Ideally, this is a render delegate
 // opinion, or should be handled in Hydra ExtComputation.
 static bool
@@ -107,6 +124,9 @@ _IsEnabledCPUComputations()
 {
     static bool enabled
         = (TfGetEnvSetting(USDSKELIMAGING_FORCE_CPU_COMPUTE) == 1);
+    //+NV_CHANGE FRZHANG
+    enabled = enabled && !_IsNVGPUSkinningComputations();
+    //-NV_CHANGE FRZHANG
     return enabled;
 }
 
@@ -115,6 +135,9 @@ _IsEnabledAggregatorComputation()
 {
     // XXX: Aggregated comps don't work with CPU comps yet.
     static bool enabled = !_IsEnabledCPUComputations();
+    //+NV_CHANGE FRZHANG
+    enabled = enabled && !_IsNVGPUSkinningComputations();
+    //-NV_CHANGE FRZHANG
     return enabled;
 }
 
@@ -141,11 +164,6 @@ UsdSkelImagingSkeletonAdapter::Populate(
         return SdfPath();
     }
 
-
-    // #nv begin #gpu-skinning
-    //+NV_FRZHANG CHANGE : comment out the below code to disable bone mesh rendering.
-# if 1 // Temp revert the comment out
-//-NV_FRZHANG CHANGE
     auto skelData = std::make_shared<_SkelData>();
     skelData->skelQuery = _skelCache.GetSkelQuery(UsdSkelSkeleton(prim));
 
@@ -155,16 +173,17 @@ UsdSkelImagingSkeletonAdapter::Populate(
     SdfPath instancer = instancerContext ?
         instancerContext->instancerId : SdfPath();
 
-    // Insert mesh prim to visualize the bone mesh for the skeleton.
-    // Note: This uses the "rest" pose of the skeleton.
-    // Also, since the bone mesh isn't backed by the UsdStage, we register the
-    // skeleton prim on its behalf.
-    index->InsertRprim(HdPrimTypeTokens->mesh, prim.GetPath(),
-        instancer, prim, shared_from_this());
-    //+NV_FRZHANG CHANGE
-#endif
-//-NV_FRZHANG CHANGE
-// nv end
+    //+NV_CHANGE FRZHANG
+    if (!_IsNVGPUSkinningComputations())
+    {
+     //-NV_CHANGE FRZHANG
+        // Insert mesh prim to visualize the bone mesh for the skeleton.
+        // Note: This uses the "rest" pose of the skeleton.
+        // Also, since the bone mesh isn't backed by the UsdStage, we register the
+        // skeleton prim on its behalf.
+        index->InsertRprim(HdPrimTypeTokens->mesh, prim.GetPath(),
+            instancer, prim, shared_from_this());
+    }
 
 
     // Insert a computation for each skinned prim targeted by this
@@ -191,6 +210,13 @@ UsdSkelImagingSkeletonAdapter::Populate(
             _skinnedPrimDataCache[skinnedPrimPath] =
                 _SkinnedPrimData(skelData->skelQuery, query);
 
+            //+NV_CHANGE FRZHANG : skip adding Sprim for the hydra skinning computation.
+            if (_IsNVGPUSkinningComputations())
+            {
+                continue;
+            }
+            //-NV_CHANGE FRZHANG
+
             SdfPath compPath = _GetSkinningComputationPath(skinnedPrimPath);
 
             TF_DEBUG(USDIMAGING_COMPUTATIONS).Msg(
@@ -385,6 +411,10 @@ UsdSkelImagingSkeletonAdapter::ProcessPropertyChange(
                     "property change. Hijacking doesn't work in this "
                     "scenario.\n", cachePath.GetText());
             }
+
+            //+NV_CHANGE FRZHANG
+            dirtyBits |= HdChangeTracker::NV_DirtySkinningBinding;
+            //-NV_CHANGE FRZHANG
         }
 
         return dirtyBits;
@@ -1200,6 +1230,25 @@ namespace {
         return false;
     }
 
+    //+NV_CHANGE FRZHANG
+    bool
+        _GetInfluences(const UsdSkelSkinningQuery& skinningQuery, UsdTimeCode time,
+            VtIntArray& jointIndices, VtFloatArray& jointWeights,
+            int& numInfluencesPerPoint, bool& hasConstantInfluences
+        )
+    {
+        numInfluencesPerPoint = skinningQuery.GetNumInfluencesPerComponent();
+        hasConstantInfluences = skinningQuery.IsRigidlyDeformed();
+        return skinningQuery.ComputeJointInfluences(&jointIndices, &jointWeights, time);
+    }
+
+    GfMatrix4d
+        _GetBindTransform(const UsdSkelSkinningQuery& skinningQuery, UsdTimeCode time )
+    {
+        return skinningQuery.GetGeomBindTransform(time);
+    }
+    //-NV_CHANGE FRZHANG
+
 
     bool
         _ComputeSkinningTransforms(const UsdSkelSkeletonQuery& skelQuery,
@@ -1757,7 +1806,18 @@ UsdSkelImagingSkeletonAdapter::_TrackSkinnedPrimVariability(
         timeVaryingBits, instancerContext);
 
     if (_IsAffectedByTimeVaryingSkelAnim(cachePath)) {
-        (*timeVaryingBits) |= HdChangeTracker::DirtyPoints;
+        //+NV_CHANGE FRZHANG : dirty the skelXform instead of points in nv gpu skinning.
+        //(*timeVaryingBits) |= HdChangeTracker::DirtyPoints;
+        if (_IsNVGPUSkinningComputations())
+        {
+            (*timeVaryingBits) |= HdChangeTracker::NV_DirtySkelAnimXform;
+        }
+        else
+        {
+            (*timeVaryingBits) |= HdChangeTracker::DirtyPoints;
+        }
+
+        //-NV_CHANGE FRZHANG
         HD_PERF_COUNTER_INCR(UsdImagingTokens->usdVaryingPrimvar);
     }
 }
@@ -1781,7 +1841,11 @@ UsdSkelImagingSkeletonAdapter::_UpdateSkinnedPrimForTime(
     ("[UpdateForTime] Cache path: <%s>\n", cachePath.GetText());
 
     // Register points as a computed primvar on the skinned prim.
-    if (requestedBits & HdChangeTracker::DirtyPoints) {
+    if ((requestedBits & HdChangeTracker::DirtyPoints)
+        //+NV_CHANGE FRZHANG
+        && !_IsNVGPUSkinningComputations()
+        //-NV_CHANGE FRZHANG
+        ) {
         UsdImagingValueCache* valueCache = _GetValueCache();
 
         HdExtComputationPrimvarDescriptorVector& computedPrimvarsEntry =
@@ -1817,11 +1881,69 @@ UsdSkelImagingSkeletonAdapter::_UpdateSkinnedPrimForTime(
     requestedBits &= ~HdChangeTracker::DirtyPoints;
 
     // Since The SkeletonAdapter hijacks skinned prims (see SkelRootAdapter),
-    // make sure to delegate to the actual adapter registered for the prim.
+// make sure to delegate to the actual adapter registered for the prim.
     UsdImagingPrimAdapterSharedPtr adapter = _GetPrimAdapter(skinnedPrim);
     adapter->UpdateForTime(skinnedPrim, skinnedPrimPath,
         time, requestedBits, instancerContext);
 
+    //+NV_CHANGE FRZHANG : nv gpu skinning input update.
+    if (_IsNVGPUSkinningComputations())
+    {
+        auto meshAdapter = boost::dynamic_pointer_cast<
+            UsdImagingMeshAdapter> (adapter);
+        TF_VERIFY(meshAdapter);
+
+        const _SkinnedPrimData* skinnedPrimData = _GetSkinnedPrimData(skinnedPrimPath);
+        TF_VERIFY(skinnedPrimData);
+
+        const _SkelData* skelData = _GetSkelData(skinnedPrimData->skelPath);
+        TF_VERIFY(skelData);
+
+        const UsdSkelSkinningQuery& skinningQuery = *skinnedPrimData->skinningQueryPtr;
+        const UsdSkelSkeletonQuery& skelQuery = skelData->skelQuery;
+        if (requestedBits & HdChangeTracker::NV_DirtySkinningBinding)
+        {
+            VtVec3fArray restPoints = _GetSkinnedPrimPoints(skinnedPrim, skinnedPrimPath, time);
+            meshAdapter->UpdateRestPoints(skinnedPrim, skinnedPrimPath, time, restPoints);
+
+            if (skinnedPrimData->hasJointInfluences)
+            {
+                GfMatrix4d bindTransform = _GetBindTransform(skinningQuery, time);
+                VtIntArray jointIndices;
+                VtFloatArray jointWeights;
+                int numInfluencesPerPoint;
+                bool hasConstantInfluences;
+                if (_GetInfluences(skinningQuery, time, jointIndices, jointWeights, numInfluencesPerPoint, hasConstantInfluences))
+                {
+                    meshAdapter->UpdateSkinningBinding(skinnedPrim, skinnedPrimPath, time,
+                        bindTransform, jointIndices, jointWeights, numInfluencesPerPoint, hasConstantInfluences);
+                }
+            }
+
+            //if (skinnedPrimData->blendShapeQuery != nullptr)
+            //{
+
+            //}
+        }
+
+        if (requestedBits & HdChangeTracker::NV_DirtySkelAnimXform)
+        {
+            if (skinnedPrimData->hasJointInfluences)
+            {
+                UsdGeomXformCache xformCache(time);
+                GfMatrix4d primWorldToLocal = xformCache.GetLocalToWorldTransform(skinnedPrim).GetInverse();
+                GfMatrix4d skelLocalToWorld = xformCache.GetLocalToWorldTransform(skelQuery.GetPrim());
+                VtMatrix4fArray skelAnimTransform;
+                if (_ComputeSkinningTransforms(skelQuery, skinnedPrimData->jointMapper, time, &skelAnimTransform))
+                {
+                    meshAdapter->UpdateSkelAnim(skinnedPrim, skinnedPrimPath, time,
+                        skelAnimTransform, primWorldToLocal, skelLocalToWorld);
+
+                }
+            }
+        }
+    }
+    //-NV_CHANGE FRZHANG
 
     // Don't publish skinning related primvars since they're consumed only by
     // the computations.
@@ -2016,7 +2138,21 @@ UsdSkelImagingSkeletonAdapter::_SkinnedPrimData::_SkinnedPrimData(
             blendShapeQuery.reset();
         }
     }
+
+    //+NV_CHANGE FRZHANG
+    NVGPUSKIN_InitSkinInfo(skelQuery,skinningQuery);
+    //-NV_CHANGE FRZHANG
 }
 
 
+void 
+UsdSkelImagingSkeletonAdapter::_SkinnedPrimData::NVGPUSKIN_InitSkinInfo(
+    const UsdSkelSkeletonQuery& skelQuery,
+    const UsdSkelSkinningQuery& skinningQuery
+)
+{
+    skinningQueryPtr =
+        std::make_shared<UsdSkelSkinningQuery>(skinningQuery);
+}
+
 PXR_NAMESPACE_CLOSE_SCOPE
\ No newline at end of file
diff --git a/pxr/usdImaging/lib/usdSkelImaging/skeletonAdapter.h b/pxr/usdImaging/lib/usdSkelImaging/skeletonAdapter.h
index 7df2119cf..e18fe2639 100644
--- a/pxr/usdImaging/lib/usdSkelImaging/skeletonAdapter.h
+++ b/pxr/usdImaging/lib/usdSkelImaging/skeletonAdapter.h
@@ -304,6 +304,11 @@ private:
         UsdSkelAnimMapper blendShapeMapper;
         SdfPath skelPath;
         bool hasJointInfluences = false;
+        //+NV_CHANGE FRZHANG
+        std::shared_ptr<UsdSkelSkinningQuery>	skinningQueryPtr;
+        void NVGPUSKIN_InitSkinInfo(const UsdSkelSkeletonQuery& skelQuery,
+            const UsdSkelSkinningQuery& skinningQuery);
+        //-NV_CHANGE FRZHANG
     };
 
     const _SkinnedPrimData* _GetSkinnedPrimData(const SdfPath& cachePath) const;
